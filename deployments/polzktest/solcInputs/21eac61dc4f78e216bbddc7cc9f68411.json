{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271Upgradeable {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../AddressUpgradeable.sol\";\nimport \"../../interfaces/IERC1271Upgradeable.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureCheckerUpgradeable {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\n        if (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271Upgradeable.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/DealsRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"./interfaces/IEntitiesRegistry.sol\";\nimport \"./interfaces/IConfig.sol\";\nimport \"./libraries/Utils.sol\";\nimport \"./libraries/SignatureUtils.sol\";\nimport \"./utils/IERC20.sol\";\n\n/**\n * @title DealsRegistry\n * @dev A smart contract for creating and managing deals between buyers and sellers.\n * The contract stores offers made by suppliers, and allows buyers to create deals based on those offers.\n * Each deal specifies the payment and cancellation terms, and can be tracked on-chain using its unique Id.\n */\nabstract contract DealsRegistry is\n  EIP712Upgradeable,\n  PausableUpgradeable,\n  OwnableUpgradeable\n{\n  using SignatureCheckerUpgradeable for address;\n  using SignatureUtils for bytes;\n  using SafeMathUpgradeable for uint256;\n\n  /// @dev The protocol config contract address\n  address public config;\n\n  /// @dev Entities registry contract address\n  address public entities;\n\n  /// @dev Mapping of context to allowed statuses list\n  mapping(bytes32 => Utils.DealStatus[]) private allowedStatuses;\n\n  /// @dev Mapping of an offer Id on a Deal\n  mapping(bytes32 => Utils.Deal) public deals;\n\n  /// @dev Emitted when a Deal status is updated\n  event Status(bytes32 offerId, Utils.DealStatus status, address sender);\n\n  /// @dev Emitted when updated an address of the protocol config contract\n  event SetConfig(address oldAddress, address newAddress);\n\n  /// @dev Emitted when updated an address of the Entities registry contract\n  event SetEntities(address oldAddress, address newAddress);\n\n  /// @dev Thrown when a user attempts to create a deal using an offer with an invalid signature\n  error InvalidOfferSignature();\n\n  /// @dev Thrown when a user attempts to create an already existing Deal\n  error DealExists();\n\n  /// @dev Thrown when Deal was created in the `_beforeCreate` hook\n  error DealAlreadyCreated();\n\n  /// @dev Thrown when the Deal is not found\n  error DealNotFound();\n\n  /// @dev Thrown when a user attempts to create a deal providing an invalid payment options\n  error InvalidPaymentOptions();\n\n  /// @dev Thrown when a user attempts to create a deal providing an invalid payment option Id\n  error InvalidPaymentId();\n\n  /// @dev Thrown when a Deal funds transfer is failed\n  error DealFundsTransferFailed();\n\n  /// @dev Thrown when the retailer of the offer is not found\n  error InvalidRetailer();\n\n  /// @dev Thrown when the supplier of the offer is not enabled\n  error DisabledSupplier();\n\n  /// @dev Thrown when the retailer is not enabled\n  error DisabledRetailer();\n\n  /// @dev Thrown when a function call is not allowed for current user\n  error NotAllowedAuth();\n\n  /// @dev Thrown when a user attempts to claim the deal in non-created status\n  error NotAllowedStatus();\n\n  /// @dev Thrown when a user attempts to do something that not allowed at a moment\n  error NotAllowedTime();\n\n  /// @dev Thrown when a user attempts to cancel the deal using invalid cancellation options\n  error InvalidCancelOptions();\n\n  /**\n   * @dev DealsRegistry initializer\n   * @param _name The name of the contract\n   * @param _version The version of the contract\n   * @param _config The protocol config contract address\n   * @param _entities Entities registry contract address\n   */\n  function __DealsRegistry_init(\n    string memory _name,\n    string memory _version,\n    address _config,\n    address _entities\n  ) internal onlyInitializing {\n    __EIP712_init(_name, _version);\n    __Pausable_init();\n\n    // Save the protocol config contract address\n    config = _config;\n\n    // Save entities registry address\n    entities = _entities;\n\n    // Allowed statuses for functions execution\n    allowedStatuses[\"reject\"] = [Utils.DealStatus.Created];\n    allowedStatuses[\"cancel\"] = [\n      Utils.DealStatus.Created,\n      Utils.DealStatus.Claimed\n    ];\n    allowedStatuses[\"refund\"] = [\n      Utils.DealStatus.Claimed,\n      Utils.DealStatus.CheckedIn\n    ];\n    allowedStatuses[\"claim\"] = [Utils.DealStatus.Created];\n    allowedStatuses[\"checkIn\"] = [Utils.DealStatus.Claimed];\n    allowedStatuses[\"checkOut\"] = [Utils.DealStatus.CheckedIn];\n    allowedStatuses[\"dispute\"] = [\n      Utils.DealStatus.CheckedIn,\n      Utils.DealStatus.CheckedOut\n    ];\n  }\n\n  /// Modifiers\n\n  /**\n   * @dev Modifier to make a function callable only when deal is exists\n   *\n   * Requirements:\n   *\n   * - the deal of the `offerId` must exists\n   */\n  modifier dealExists(bytes32 offerId) {\n    if (deals[offerId].offer.id == bytes32(0)) {\n      revert DealNotFound();\n    }\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when deal in specific statuses.\n   *\n   * Requirements:\n   *\n   * - the deal of the `offerId` must exists\n   * - the deal is in `statuses`\n   */\n  modifier inStatuses(bytes32 offerId, Utils.DealStatus[] memory statuses) {\n    uint256 allowed;\n    Utils.DealStatus currentStatus = deals[offerId].status;\n\n    for (uint256 i = 0; i < statuses.length; i++) {\n      if (currentStatus == statuses[i]) {\n        allowed = 1;\n        break;\n      }\n    }\n\n    if (allowed != 1) {\n      revert NotAllowedStatus();\n    }\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only by supplier's signer.\n   *\n   * Requirements:\n   *\n   * - the function called by the supplier's signer\n   */\n  modifier onlySigner(bytes32 offerId) {\n    if (\n      _msgSender() !=\n      IEntitiesRegistry(entities)\n        .getEntity(deals[offerId].offer.supplierId)\n        .signer\n    ) {\n      revert NotAllowedAuth();\n    }\n    _;\n  }\n\n  /// Utilities\n\n  /**\n   * @dev Sets the new address of the protocol config contract address\n   * @param _config The new protocol config contract address\n   */\n  function setConfig(address _config) external onlyOwner {\n    emit SetConfig(config, _config);\n    config = _config;\n  }\n\n  /**\n   * @dev Sets the new address of the entities registry\n   * @param _entities The new protocol config contract address\n   */\n  function setEntities(address _entities) external onlyOwner {\n    emit SetEntities(entities, _entities);\n    entities = _entities;\n  }\n\n  /// Workflow hooks\n\n  /**\n   * @dev Hook function that runs before a new deal is created.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offer The offer used to create the deal\n   * @param price The price of the asset in wei\n   * @param asset The address of the ERC20 token used for payment\n   * @param signs An array of signatures authorizing the creation of the deal\n   */\n  function _beforeCreate(\n    Utils.Offer memory offer,\n    uint256 price,\n    address asset,\n    bytes[] memory signs\n  ) internal virtual whenNotPaused {}\n\n  /**\n   * @dev Hook function that runs after a new deal is created.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offer The offer used to create the deal\n   * @param price The price of the asset in wei\n   * @param asset The address of the ERC20 token used for payment\n   * @param signs An array of signatures authorizing the creation of the deal\n   */\n  function _afterCreate(\n    Utils.Offer memory offer,\n    uint256 price,\n    address asset,\n    bytes[] memory signs\n  ) internal virtual {}\n\n  /**\n   * @dev Hook function that runs before the deal is rejected by a supplier.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   * @param reason Rejection reason\n   */\n  function _beforeReject(\n    bytes32 offerId,\n    bytes32 reason\n  ) internal virtual whenNotPaused {}\n\n  /**\n   * @dev Hook function that runs after the deal is rejected by s supplier.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   * @param reason Rejection reason\n   */\n  function _afterReject(bytes32 offerId, bytes32 reason) internal virtual {}\n\n  /**\n   * @dev Hook function that runs before the deal is canceled.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   */\n  function _beforeCancel(bytes32 offerId) internal virtual whenNotPaused {}\n\n  /**\n   * @dev Hook function that runs after the deal is canceled.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   */\n  function _afterCancel(bytes32 offerId) internal virtual {}\n\n  /**\n   * @dev Hook function that runs before the deal is refunded.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   */\n  function _beforeRefund(bytes32 offerId) internal virtual whenNotPaused {}\n\n  /**\n   * @dev Hook function that runs after the deal is refunded.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   */\n  function _afterRefund(bytes32 offerId) internal virtual {}\n\n  /**\n   * @dev Hook function that runs before the deal is claimed.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   * @param buyer Address of the deal buyer\n   */\n  function _beforeClaim(\n    bytes32 offerId,\n    address buyer\n  ) internal virtual whenNotPaused {}\n\n  /**\n   * @dev Hook function that runs after the deal is claimed.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   * @param buyer Address of the deal buyer\n   */\n  function _afterClaim(bytes32 offerId, address buyer) internal virtual {}\n\n  /**\n   * @dev Hook function that runs before the deal is checked in.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   * @param signs An array of signatures authorizing the check in of the deal\n   */\n  function _beforeCheckIn(\n    bytes32 offerId,\n    bytes[] memory signs\n  ) internal virtual whenNotPaused {}\n\n  /**\n   * @dev Hook function that runs after the deal is checked in.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   * @param signs An array of signatures authorizing the check in of the deal\n   */\n  function _afterCheckIn(\n    bytes32 offerId,\n    bytes[] memory signs\n  ) internal virtual {}\n\n  /**\n   * @dev Hook function that runs before the deal is checked out.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   */\n  function _beforeCheckOut(bytes32 offerId) internal virtual whenNotPaused {}\n\n  /**\n   * @dev Hook function that runs after the deal is checked out.\n   * Allows inheriting smart contracts to perform custom logic.\n   * @param offerId The offerId of the deal\n   */\n  function _afterCheckOut(bytes32 offerId) internal virtual {}\n\n  /// Features\n\n  /**\n   * @dev Creates a Deal on a base of an offer\n   * @param offer An offer payload\n   * @param paymentOptions Raw offered payment options array\n   * @param paymentId Payment option Id\n   * @param retailerId Retailer Id\n   * @param signs Signatures: [0] - offer: ECDSA/ERC1271; [1] - asset permit: ECDSA (optional)\n   *\n   * Requirements:\n   *\n   * - supplier of the offer must be registered\n   * - offer must be signed with a proper signer\n   * - the deal should not be created before\n   * - the deal should not be created inside the _before hook\n   * - payment options must be valid (equal to those from the offer)\n   * - payment Id must exists in payment options\n   * - the contract must be able to make transfer of funds\n   *\n   * NOTE: `permit` signature can be ECDSA of type only\n   */\n  function deal(\n    Utils.Offer memory offer,\n    Utils.PaymentOption[] memory paymentOptions,\n    bytes32 paymentId,\n    bytes32 retailerId,\n    bytes[] memory signs\n  ) external {\n    address buyer = _msgSender();\n\n    /// @dev variable scoping used to avoid stack too deep errors\n    /// The `supplier` storage variable is required is the frame of this scope only\n    {\n      bytes32 offerHash = _hashTypedDataV4(Utils.hash(offer));\n      IEntitiesRegistry.Entity memory supplier = IEntitiesRegistry(entities)\n        .getEntity(offer.supplierId);\n\n      // Checking ECDSA/AA signature is valid\n      if (!supplier.signer.isValidSignatureNow(offerHash, signs[0])) {\n        revert InvalidOfferSignature();\n      }\n\n      // Not-enabled suppliers are not allowed to accept deals\n      // So, we cannot allow to create such a deal\n      if (!IEntitiesRegistry(entities).isEntityEnabled(offer.supplierId)) {\n        revert DisabledSupplier();\n      }\n\n      // The retailer is optional, so we validate its rules only if retailerId is defined\n      if (retailerId != bytes32(0)) {\n        IEntitiesRegistry.Entity memory retailer = IEntitiesRegistry(entities)\n          .getEntity(retailerId);\n\n        // Retailer must be registered\n        if (retailer.owner == address(0)) {\n          revert InvalidRetailer();\n        }\n\n        // Not-enabled retailer are not allowed\n        if (!IEntitiesRegistry(entities).isEntityEnabled(retailerId)) {\n          revert DisabledRetailer();\n        }\n      }\n\n      // Deal can be created only once\n      if (deals[offer.id].offer.id == offer.id) {\n        revert DealExists();\n      }\n\n      bytes32 paymentHash = Utils.hash(paymentOptions);\n\n      // payment options provided with argument must be the same\n      // as signed in the offer\n      if (paymentHash != offer.paymentHash) {\n        revert InvalidPaymentOptions();\n      }\n    }\n\n    uint256 price;\n    address asset;\n\n    for (uint256 i = 0; i < paymentOptions.length; i++) {\n      // Payment id must be one of the defined in payment options\n      if (paymentOptions[i].id == paymentId) {\n        price = paymentOptions[i].price;\n        asset = paymentOptions[i].asset;\n        break;\n      }\n    }\n\n    if (asset == address(0)) {\n      revert InvalidPaymentId();\n    }\n\n    _beforeCreate(offer, price, asset, signs);\n\n    // Check that the deal was not created by `_beforeCreate` hook\n    if (deals[offer.id].offer.id == offer.id) {\n      revert DealAlreadyCreated();\n    }\n\n    // Creating the deal before any external call to avoid reentrancy\n    deals[offer.id] = Utils.Deal(\n      block.timestamp,\n      offer,\n      retailerId,\n      buyer,\n      price,\n      asset,\n      Utils.DealStatus.Created\n    );\n\n    if (signs.length > 1) {\n      // Use permit function to transfer tokens from the sender to the contract\n      (uint8 v, bytes32 r, bytes32 s) = signs[1].split();\n      IERC20(asset).permit(buyer, address(this), price, offer.expire, v, r, s);\n    }\n\n    // Use transferFrom function to transfer tokens from the sender to the contract\n    if (!IERC20(asset).transferFrom(buyer, address(this), price)) {\n      revert DealFundsTransferFailed();\n    }\n\n    emit Status(offer.id, Utils.DealStatus.Created, buyer);\n\n    _afterCreate(offer, price, asset, signs);\n  }\n\n  /**\n   * @dev Rejects the deal\n   * @param offerId The deal offer Id\n   * @param reason Rejection reason\n   *\n   * Requirements:\n   *\n   * - the deal must exists\n   * - the deal must be in status DealStatus.Created\n   * - must be called by the signer address of the deal offer supplier\n   */\n  function reject(\n    bytes32 offerId,\n    bytes32 reason\n  )\n    external\n    dealExists(offerId)\n    onlySigner(offerId)\n    inStatuses(offerId, allowedStatuses[\"reject\"])\n  {\n    Utils.Deal storage storedDeal = deals[offerId];\n\n    // Moving to the Rejected status before all to avoid reentrancy\n    storedDeal.status = Utils.DealStatus.Rejected;\n\n    _beforeReject(offerId, reason);\n\n    if (\n      !IERC20(storedDeal.asset).transfer(storedDeal.buyer, storedDeal.price)\n    ) {\n      revert DealFundsTransferFailed();\n    }\n\n    emit Status(offerId, Utils.DealStatus.Rejected, _msgSender());\n\n    _afterReject(offerId, reason);\n  }\n\n  /**\n   * @dev Refunds the deal\n   * @param offerId The deal offer Id\n   *\n   * Requirements:\n   *\n   * - the deal must exists\n   * - the deal must be in status DealStatus.CheckedIn\n   * - must be called by the signer address of the deal offer supplier\n   */\n  function refund(\n    bytes32 offerId\n  )\n    external\n    dealExists(offerId)\n    onlySigner(offerId)\n    inStatuses(offerId, allowedStatuses[\"refund\"])\n  {\n    Utils.Deal storage storedDeal = deals[offerId];\n\n    // Moving to the Refunded status before all to avoid reentrancy\n    storedDeal.status = Utils.DealStatus.Refunded;\n\n    _beforeRefund(offerId);\n\n    if (\n      !IERC20(storedDeal.asset).transfer(storedDeal.buyer, storedDeal.price)\n    ) {\n      revert DealFundsTransferFailed();\n    }\n\n    emit Status(offerId, Utils.DealStatus.Refunded, _msgSender());\n\n    _afterRefund(offerId);\n  }\n\n  /**\n   * @dev Cancels the deal\n   * @param offerId The deal offer Id\n   * @param _cancelOptions Cancellation options from offer\n   *\n   * Requirements:\n   *\n   * - the deal must exists\n   * - the deal must be in status DealStatus.Created or DealStatus.Claimed\n   * - must be called by buyer\n   * - if the deal in DealStatus.Claimed status:\n   *   - if block.timestamp > checkIn time then zero refund\n   *   - cancellation rules must follow the rules defined by offer\n   */\n  function cancel(\n    bytes32 offerId,\n    Utils.CancelOption[] memory _cancelOptions\n  )\n    external\n    dealExists(offerId)\n    inStatuses(offerId, allowedStatuses[\"cancel\"])\n  {\n    address sender = _msgSender();\n    Utils.Deal storage storedDeal = deals[offerId];\n\n    if (sender != storedDeal.buyer) {\n      revert NotAllowedAuth();\n    }\n\n    // Buyer is not able to cancel the deal during `claim_period`\n    // This time is given to the supplier to claim the deal\n    if (\n      block.timestamp <\n      storedDeal.created.add(IConfig(config).getNumber(\"claim_period\"))\n    ) {\n      revert NotAllowedTime();\n    }\n\n    Utils.DealStatus callStatus = storedDeal.status;\n\n    // Moving to the Cancelled status before all to avoid reentrancy\n    storedDeal.status = Utils.DealStatus.Cancelled;\n\n    _beforeCancel(offerId);\n\n    if (callStatus == Utils.DealStatus.Created) {\n      // Full refund\n      if (\n        !IERC20(storedDeal.asset).transfer(storedDeal.buyer, storedDeal.price)\n      ) {\n        revert DealFundsTransferFailed();\n      }\n    } else if (\n      callStatus == Utils.DealStatus.Claimed &&\n      block.timestamp < storedDeal.offer.checkIn\n    ) {\n      if (storedDeal.offer.cancelHash != Utils.hash(_cancelOptions)) {\n        revert InvalidCancelOptions();\n      }\n\n      // Using offer cancellation rules\n      uint256 selectedTime;\n      uint256 selectedPenalty;\n\n      for (uint256 i = 0; i < _cancelOptions.length; i++) {\n        if (\n          block.timestamp >= _cancelOptions[i].time &&\n          (selectedTime == 0 || _cancelOptions[i].time < selectedTime)\n        ) {\n          selectedTime = _cancelOptions[i].time;\n          selectedPenalty = _cancelOptions[i].penalty;\n        }\n      }\n\n      if (selectedPenalty > 100) {\n        selectedPenalty = 100;\n      }\n\n      uint256 penaltyValue = Utils._percentage(\n        storedDeal.price,\n        selectedPenalty\n      );\n\n      if (\n        !IERC20(storedDeal.asset).transfer(\n          storedDeal.buyer,\n          storedDeal.price.sub(penaltyValue)\n        )\n      ) {\n        revert DealFundsTransferFailed();\n      }\n\n      if (\n        penaltyValue > 0 &&\n        !IERC20(storedDeal.asset).transfer(\n          IEntitiesRegistry(entities)\n            .getEntity(storedDeal.offer.supplierId)\n            .owner,\n          penaltyValue\n        )\n      ) {\n        revert DealFundsTransferFailed();\n      }\n    } else {\n      revert NotAllowedStatus();\n    }\n\n    emit Status(offerId, Utils.DealStatus.Cancelled, sender);\n\n    _afterCancel(offerId);\n  }\n\n  /**\n   * @dev Claims the deal\n   * @param offerId The deal offer Id\n   *\n   * Requirements:\n   *\n   * - the deal must exists\n   * - the deal must be in status DealStatus.Created\n   * - must be called by the signer address of the deal offer supplier\n   */\n  function claim(\n    bytes32 offerId\n  )\n    external\n    dealExists(offerId)\n    onlySigner(offerId)\n    inStatuses(offerId, allowedStatuses[\"claim\"])\n  {\n    Utils.Deal storage storedDeal = deals[offerId];\n\n    _beforeClaim(offerId, storedDeal.buyer);\n\n    storedDeal.status = Utils.DealStatus.Claimed;\n    emit Status(offerId, Utils.DealStatus.Claimed, _msgSender());\n\n    _afterClaim(offerId, storedDeal.buyer);\n  }\n\n  /**\n   * @dev Checks in the deal\n   * @param offerId The deal offer Id\n   * @param signs Signatures\n   *\n   * Requirements:\n   *\n   * - the deal must exists\n   * - the deal must be in status DealStatus.Claimed\n   * - must be called by the supplier's signer or buyer's address\n   * - if called by the supplier's signer:\n   *   - a valid signature of suppliers's signer must be provided in signs[0]\n   *   - if before sign-in time: a valid signature of the buyer must be provided in signs[1]\n   * - if called buy buyer:\n   *   - a valid signature of the buyer must be provided in signs[0]\n   *   - a valid signature of suppliers's signer must be provided in signs[1]\n   */\n  function checkIn(\n    bytes32 offerId,\n    bytes[] memory signs\n  )\n    external\n    dealExists(offerId)\n    inStatuses(offerId, allowedStatuses[\"checkIn\"])\n  {\n    Utils.Deal storage storedDeal = deals[offerId];\n    IEntitiesRegistry.Entity memory supplier = IEntitiesRegistry(entities)\n      .getEntity(storedDeal.offer.supplierId);\n\n    address sender = _msgSender();\n    bytes32 signInHash;\n\n    if (sender == supplier.signer) {\n      // The function is called by the supplier's signer\n      signInHash = _hashTypedDataV4(\n        Utils.hashCheckInOut(storedDeal.offer.id, supplier.signer)\n      );\n\n      // Checking ECDSA/AA signature of the suppliers's signer is valid\n      if (!supplier.signer.isValidSignatureNow(signInHash, signs[0])) {\n        revert InvalidOfferSignature();\n      }\n\n      // Before checkIn time of the offer a signature of the buyer is required\n      if (block.timestamp < storedDeal.offer.checkIn) {\n        signInHash = _hashTypedDataV4(\n          Utils.hashCheckInOut(storedDeal.offer.id, storedDeal.buyer)\n        );\n\n        // Checking ECDSA/AA signature of the buyer is valid\n        if (!storedDeal.buyer.isValidSignatureNow(signInHash, signs[1])) {\n          revert InvalidOfferSignature();\n        }\n      }\n    } else if (sender == storedDeal.buyer) {\n      signInHash = _hashTypedDataV4(\n        Utils.hashCheckInOut(storedDeal.offer.id, storedDeal.buyer)\n      );\n\n      // Checking ECDSA/AA signature of the suppliers's signer is valid\n      if (!storedDeal.buyer.isValidSignatureNow(signInHash, signs[0])) {\n        revert InvalidOfferSignature();\n      }\n\n      signInHash = _hashTypedDataV4(\n        Utils.hashCheckInOut(storedDeal.offer.id, supplier.signer)\n      );\n\n      // Checking ECDSA/AA signature of the buyer is valid\n      if (!supplier.signer.isValidSignatureNow(signInHash, signs[1])) {\n        revert InvalidOfferSignature();\n      }\n    } else {\n      revert NotAllowedAuth();\n    }\n\n    // Execute before checkIn hook\n    _beforeCheckIn(offerId, signs);\n\n    storedDeal.status = Utils.DealStatus.CheckedIn;\n    emit Status(offerId, Utils.DealStatus.CheckedIn, sender);\n\n    // Execute after checkIn hook\n    _afterCheckIn(offerId, signs);\n  }\n\n  /**\n   * @dev Checks out the deal and sends funds to the supplier\n   * @param offerId The deal offer Id\n   *\n   * Requirements:\n   *\n   * - the deal must exists\n   * - must be called by the supplier's signer only\n   * - the deal must be in status DealStatus.CheckIn\n   * - must be called after checkOut time only\n   */\n  function checkOut(\n    bytes32 offerId\n  )\n    external\n    dealExists(offerId)\n    onlySigner(offerId)\n    inStatuses(offerId, allowedStatuses[\"checkOut\"])\n  {\n    Utils.Deal storage storedDeal = deals[offerId];\n\n    if (block.timestamp < storedDeal.offer.checkOut) {\n      revert NotAllowedTime();\n    }\n\n    // Moving to CheckedOut status before all to avoid reentrancy\n    storedDeal.status = Utils.DealStatus.CheckedOut;\n\n    // Execute before checkOut hook\n    _beforeCheckOut(offerId);\n\n    uint256 protocolFee;\n    uint256 retailerFee;\n    uint256 supplierValue;\n\n    protocolFee = Utils._percentage(\n      storedDeal.price,\n      IConfig(config).getNumber(\"protocol_fee\")\n    );\n\n    if (storedDeal.retailerId != bytes32(0)) {\n      retailerFee = Utils._percentage(\n        storedDeal.price,\n        IConfig(config).getNumber(\"retailer_fee\")\n      );\n    }\n\n    supplierValue = storedDeal.price.sub(protocolFee).sub(retailerFee);\n\n    if (\n      protocolFee > 0 &&\n      // Sends fee to the protocol recipient\n      !IERC20(storedDeal.asset).transfer(\n        IConfig(config).getAddress(\"fee_recipient\"),\n        protocolFee\n      )\n    ) {\n      revert DealFundsTransferFailed();\n    }\n\n    if (\n      retailerFee > 0 &&\n      // Send fee to the deal retailer\n      !IERC20(storedDeal.asset).transfer(\n        IEntitiesRegistry(entities).getEntity(storedDeal.retailerId).owner,\n        retailerFee\n      )\n    ) {\n      revert DealFundsTransferFailed();\n    }\n\n    if (\n      // Sends value to the supplier\n      !IERC20(storedDeal.asset).transfer(\n        IEntitiesRegistry(entities)\n          .getEntity(storedDeal.offer.supplierId)\n          .owner,\n        supplierValue\n      )\n    ) {\n      revert DealFundsTransferFailed();\n    }\n\n    emit Status(offerId, Utils.DealStatus.CheckedOut, _msgSender());\n\n    // Execute after checkOut hook\n    _afterCheckOut(offerId);\n  }\n\n  uint256[50] private __gap;\n}\n"
    },
    "contracts/ERC721Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\n\n/**\n * @title ERC721Token\n * @dev Abstract contract that defines an ERC721 token\n * with additional functionality for enumeration and pausing\n */\nabstract contract ERC721Token is\n  ERC721Upgradeable,\n  ERC721EnumerableUpgradeable,\n  PausableUpgradeable,\n  OwnableUpgradeable\n{\n  using CountersUpgradeable for CountersUpgradeable.Counter;\n\n  /// @dev Internal counter to keep track of tokenIds\n  CountersUpgradeable.Counter private _tokenIdCounter;\n\n  /**\n   * @dev Initializer that sets the name and symbol of the token\n   * @param name The name of the token\n   * @param symbol The symbol of the token\n   */\n  function __ERC721Token_init(\n    string memory name,\n    string memory symbol\n  ) internal onlyInitializing {\n    __ERC721_init(name, symbol);\n    __ERC721Enumerable_init();\n    __Pausable_init();\n  }\n\n  /**\n   * @dev Internal function to safely mint an NFT to an address with custom URI\n   * @param to The address that will receive the minted NFT\n   */\n  function safeMint(address to) internal returns (uint256) {\n    uint256 tokenId = _tokenIdCounter.current();\n    _tokenIdCounter.increment();\n    _safeMint(to, tokenId);\n    return tokenId;\n  }\n\n  /**\n   * @dev Internal function to safely burn an NFT\n   * @param tokenId The ID of the NFT to be burnt\n   */\n  function safeBurn(uint256 tokenId) internal {\n    require(\n      _isApprovedOrOwner(_msgSender(), tokenId),\n      \"ERC721: caller is not token owner or approved\"\n    );\n    _burn(tokenId);\n  }\n\n  /// @inheritdoc ERC721Upgradeable\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    uint256 batchSize\n  )\n    internal\n    virtual\n    override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\n    whenNotPaused\n  {\n    super._beforeTokenTransfer(from, to, tokenId, batchSize);\n  }\n\n  /// @inheritdoc ERC721Upgradeable\n  function supportsInterface(\n    bytes4 interfaceId\n  )\n    public\n    view\n    override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n}\n"
    },
    "contracts/interfaces/IConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title Configurable contract interface\n * @dev Interface for a contract that allows for dynamic configuration of uint256 and address values.\n */\ninterface IConfig {\n  /**\n   * @dev Returns a number by name\n   * @param _name A number name\n   * @return The value of the number\n   */\n  function getNumber(bytes32 _name) external view returns (uint256);\n\n  /**\n   * @dev Returns an address by name\n   * @param _name An address name\n   * @return The address value\n   */\n  function getAddress(bytes32 _name) external view returns (address);\n\n  /**\n   * @dev Returns a list of registered config variables names\n   * @return Array of registered variables names\n   */\n  function variables() external view returns (bytes32[] memory);\n\n  /**\n   * @dev Returns a minDeposit value of the entity\n   * @param _name An entity name\n   * @return The value of the number\n   */\n  function getMinDeposit(bytes32 _name) external view returns (uint256);\n\n  /**\n   * @dev Changes variable uint256 of value\n   * @param name Name of variable\n   * @param value Value of variable\n   */\n  function config(bytes32 name, uint256 value) external;\n\n  /**\n   * @dev Changes variable address of value\n   * @param name Name of variable\n   * @param value Value of variable\n   */\n  function config(bytes32 name, address value) external;\n\n  /**\n   * @dev Sets minimum deposits values\n   * @param _kinds Supported entity types\n   * @param _minDeposits Minimum value of deposit\n   */\n  function setMinDeposits(\n    bytes32[] memory _kinds,\n    uint256[] memory _minDeposits\n  ) external;\n}\n"
    },
    "contracts/interfaces/IEntitiesRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title IEntitiesRegistry\n * @dev A smart contract interface for registering and managing entities who can participate in the protocol.\n */\ninterface IEntitiesRegistry {\n  /**\n   * @dev Entity storage struct\n   * @param id Unique entity Id\n   * @param owner Owner of the entity entity\n   * @param enabled The entity entity activity flag\n   * @param signer Offers signer\n   */\n  struct Entity {\n    bytes32 kind;\n    bytes32 id;\n    address owner;\n    bool enabled;\n    address signer;\n  }\n\n  /**\n   * @dev Returns entity by Id\n   * @param _id The entity Id\n   */\n  function getEntity(bytes32 _id) external view returns (Entity memory);\n\n  /**\n   * @dev Returns the value of the entity's deposit\n   * @param _id The entity Id\n   */\n  function balanceOfEntity(bytes32 _id) external view returns (uint256);\n\n  /**\n   * @dev Returns the value of `enabled` entity status\n   * @param _id The entity Id\n   */\n  function isEntityEnabled(bytes32 _id) external view returns (bool);\n\n  /**\n   * @dev Sets the new address of the protocol config contract address\n   */\n  function setConfig(address _config) external;\n\n  /**\n   * @dev Registers a new entity\n   * @param _kind Type of entity\n   * @param _salt Unique bytes32 string that allows off-chain calculation of the entity Id\n   * @param _signer Account address that authorized by the entity owner to sign offers\n   *\n   * If registering of the entity is succeeded:\n   * - the function emits `EntityRegistered(bytes32 id, bytes32 id)` event\n   *\n   * Requirements:\n   *\n   * - `salt` can be used only once. If a `salt` has been used and the entity is registered\n   *   the next attempt will results in the error `EntityExists()`\n   * - an entity type provided with `_kind` must be registered\n   *\n   * NOTE: When the entity is registered its initial `enabled` status is set to `false`.\n   * This means that to start accepting deals the entity must be enabled\n   */\n  function register(bytes32 _kind, bytes32 _salt, address _signer) external;\n\n  /**\n   * @dev Changes signer account of the entity\n   * @param _id The entity Id\n   * @param _signer Account authorized by the entity to sign offers\n   *\n   * If changing of the signer is succeeded:\n   * - the function emits `SignerChanged(bytes32 id, address sender, address oldSigner, address new Signer)` event\n   *\n   * Requirements:\n   *\n   * - can be called by the entity owner only\n   */\n  function changeSigner(bytes32 _id, address _signer) external;\n\n  /**\n   * @dev Toggles an enabled status of the entity\n   * @param _id The entity Id\n   *\n   * This function inverts a value of the `enabled` parameter of the entity\n   *\n   * If toggling is succeeded:\n   * - the function emits `ToggleEnabled(bytes32 id, address sender, bool enabled)` event\n   *\n   * Requirements:\n   *\n   * - can be called by the entity owner only\n   */\n  function toggleEntity(bytes32 _id) external;\n\n  /**\n   * @dev See {EntitiesRegistry._addDeposit}.\n   */\n  function addDeposit(bytes32 _id, uint256 _value) external;\n\n  /**\n   * @dev Makes deposit of `asset` tokens with permit\n   * @param _id The entity Id\n   * @param _value Amount of `asset` tokens that must be deposited\n   * @param _deadline Deadline time of permit\n   * @param _sign Permit signature (EIP712)\n   *\n   * If `_sign` argument is provided the function will use the `permit` function\n   * to transfer tokens from the sender to the contract, overwise the usual\n   * `transferFrom` will be used.\n   *\n   * If the tokens transfer is succeeded:\n   * - the function emits `Deposit(bytes32 id, address sender, uint256 value)` event\n   *\n   * Requirements:\n   *\n   * - can be called by the entity owner only\n   */\n  function addDeposit(\n    bytes32 _id,\n    uint256 _value,\n    uint256 _deadline,\n    bytes memory _sign\n  ) external;\n\n  /**\n   * @dev Makes deposit withdrawal of the entity\n   * @param _id The entity Id\n   * @param _value Amount of `asset` tokens that must be withdrawn\n   *\n   * If the tokens withdrawal is succeeded:\n   * - the function emits `Withdraw(bytes32 id, address sender, uint256 value)` event\n   *\n   * Requirements:\n   *\n   * - can be called by the entity owner only\n   */\n  function withdrawDeposit(bytes32 _id, uint256 _value) external;\n}\n"
    },
    "contracts/libraries/SignatureUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nlibrary SignatureUtils {\n  error InvalidSignature();\n\n  /// @dev Splits signature into v/r/s form\n  function split(\n    bytes memory signature\n  ) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\n    if (signature.length == 65) {\n      assembly {\n        r := mload(add(signature, 0x20))\n        s := mload(add(signature, 0x40))\n        v := byte(0, mload(add(signature, 0x60)))\n\n        if eq(v, 0) {\n          v := 27\n        }\n\n        if eq(v, 1) {\n          v := 28\n        }\n      }\n    } else {\n      revert InvalidSignature();\n    }\n  }\n}\n"
    },
    "contracts/libraries/Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\n\nlibrary Utils {\n  using SafeMathUpgradeable for uint256;\n\n  /// Constants\n\n  bytes32 public constant PAYMENT_OPTION_TYPE_HASH =\n    keccak256(\"PaymentOption(bytes32 id,uint256 price,address asset)\");\n\n  bytes32 public constant CANCEL_OPTION_TYPE_HASH =\n    keccak256(\"CancelOption(uint256 time,uint256 penalty)\");\n\n  bytes32 public constant OFFER_TYPE_HASH =\n    keccak256(\n      // solhint-disable-next-line max-line-length\n      \"Offer(bytes32 id,uint256 expire,bytes32 supplierId,uint256 chainId,bytes32 requestHash,bytes32 optionsHash,bytes32 paymentHash,bytes32 cancelHash,bool transferable,uint256 checkIn,uint256 checkOut)\"\n    );\n\n  bytes32 public constant CHECK_IN_TYPE_HASH =\n    keccak256(\"Voucher(bytes32 id,address signer)\");\n\n  /// Errors\n\n  /// @dev Thrown when percents value greater than 100\n  error InvalidPercent();\n\n  /// Data structures\n\n  /**\n   * @dev Payment option\n   * @param id Unique ID of the payment option\n   * @param price The price of the asset in wei\n   * @param asset The address of the ERC20 token used for payment\n   */\n  struct PaymentOption {\n    bytes32 id;\n    uint256 price;\n    address asset;\n  }\n\n  /**\n   * @dev Deal cancellation option\n   * @param time The number of seconds before checkIn\n   * @param penalty The percentage of the total sum to be paid as a penalty if the deal is cancelled\n   */\n  struct CancelOption {\n    uint256 time;\n    uint256 penalty;\n  }\n\n  /**\n   * @dev Offer payload\n   * @param id The unique ID of the offer\n   * @param expire The time when the offer expires (in seconds since the Unix epoch)\n   * @param supplierId The unique ID of the supplier offering the deal\n   * @param chainId The ID of the network chain where the deal is to be executed\n   * @param requestHash The hash of the request made by the buyer\n   * @param optionsHash The hash of the payment and cancellation options for the deal\n   * @param paymentHash The hash of the payment option used for the deal\n   * @param cancelHash The hash of the cancellation option used for the deal\n   * @param transferable Indicates whether the deal NFT is transferable or not\n   * @param checkIn The check-in time for the deal (in seconds since the Unix epoch)\n   * @param checkOut The check-out time for the deal (in seconds since the Unix epoch)\n   */\n  struct Offer {\n    bytes32 id;\n    uint256 expire;\n    bytes32 supplierId;\n    uint256 chainId;\n    bytes32 requestHash;\n    bytes32 optionsHash;\n    bytes32 paymentHash;\n    bytes32 cancelHash;\n    bool transferable;\n    uint256 checkIn;\n    uint256 checkOut;\n  }\n\n  /**\n   * @dev Deal status\n   */\n  enum DealStatus {\n    Created, // Just created\n    Claimed, // Claimed by the supplier\n    Rejected, // Rejected by the supplier\n    Refunded, // Refunded by the supplier\n    Cancelled, // Cancelled by the buyer\n    CheckedIn, // Checked In\n    CheckedOut, // Checked Out\n    Disputed // Dispute started\n  }\n\n  /**\n   * @dev Deal storage struct\n   * @param offer Offer payload\n   * @param price Deal price\n   * @param asset Deal asset\n   * @param status Current deal status\n   */\n  struct Deal {\n    uint256 created;\n    Offer offer;\n    bytes32 retailerId;\n    address buyer;\n    uint256 price;\n    address asset;\n    DealStatus status;\n  }\n\n  /// @dev Create a has of bytes32 array\n  function hash(bytes32[] memory _hashes) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_hashes));\n  }\n\n  /// @dev Creates a hash of a PaymentOption\n  function hash(\n    PaymentOption memory _paymentOptions\n  ) internal pure returns (bytes32) {\n    return\n      keccak256(\n        abi.encodePacked(\n          PAYMENT_OPTION_TYPE_HASH,\n          _paymentOptions.id,\n          _paymentOptions.price,\n          _paymentOptions.asset\n        )\n      );\n  }\n\n  /// @dev Creates a hash of a CancelOption\n  function hash(CancelOption memory _cancel) internal pure returns (bytes32) {\n    return\n      keccak256(\n        abi.encodePacked(CANCEL_OPTION_TYPE_HASH, _cancel.time, _cancel.penalty)\n      );\n  }\n\n  /// @dev Creates a hash of an array of PaymentOption\n  function hash(\n    PaymentOption[] memory _paymentOptions\n  ) internal pure returns (bytes32) {\n    bytes32[] memory hashes = new bytes32[](_paymentOptions.length);\n\n    for (uint256 i = 0; i < _paymentOptions.length; i++) {\n      hashes[i] = hash(_paymentOptions[i]);\n    }\n\n    return hash(hashes);\n  }\n\n  /// @dev Creates a hash of an array of CancelOption\n  function hash(\n    CancelOption[] memory _cancelOptions\n  ) internal pure returns (bytes32) {\n    bytes32[] memory hashes = new bytes32[](_cancelOptions.length);\n\n    for (uint256 i = 0; i < _cancelOptions.length; i++) {\n      hashes[i] = hash(_cancelOptions[i]);\n    }\n\n    return hash(hashes);\n  }\n\n  /// @dev Creates a hash of an Offer\n  function hash(Offer memory _offer) internal pure returns (bytes32) {\n    return\n      keccak256(\n        abi.encode(\n          OFFER_TYPE_HASH,\n          _offer.id,\n          _offer.expire,\n          _offer.supplierId,\n          _offer.chainId,\n          _offer.requestHash,\n          _offer.optionsHash,\n          _offer.paymentHash,\n          _offer.cancelHash,\n          _offer.transferable,\n          _offer.checkIn,\n          _offer.checkOut\n        )\n      );\n  }\n\n  /// @dev Create a hash of check-in data\n  function hashCheckInOut(\n    bytes32 _id,\n    address _signer\n  ) internal pure returns (bytes32) {\n    return keccak256(abi.encode(CHECK_IN_TYPE_HASH, _id, _signer));\n  }\n\n  /// @dev Calculates percentage value\n  function _percentage(\n    uint256 value,\n    uint256 percent\n  ) internal pure returns (uint256) {\n    if (percent > 100) {\n      revert InvalidPercent();\n    }\n    return value.mul(1000).mul(percent).div(100).div(1000);\n  }\n}\n"
    },
    "contracts/Market.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"./ERC721Token.sol\";\nimport \"./DealsRegistry.sol\";\nimport \"./libraries/Utils.sol\";\n\n/**\n * @title Market\n * @dev This contract enables the creation and management of deals\n * @custom:security-contact security@windingtree.com\n */\ncontract Market is ERC721Token, DealsRegistry {\n  /// @dev Mapping of token Id on offer Id\n  mapping(uint256 => bytes32) public tokenOffers;\n\n  /// @dev Mapping of offer Id on token Id\n  mapping(bytes32 => uint256) public offerTokens;\n\n  /// Throws when NFT transfer is not allowed by offer rule\n  error TokenTransferNotAllowed();\n\n  /**\n   * @dev Constructor of ERC721Token\n   */\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  /**\n   * @dev Initializes the Market contract with the given arguments\n   * @param _owner The owner of the contract\n   * @param _name The name of the contract\n   * @param _version The version of the contract\n   * @param _config The protocol config contract address\n   * @param _entities Entities registry contract address\n   */\n  function initialize(\n    address _owner,\n    string memory _name,\n    string memory _version,\n    address _config,\n    address _entities\n  ) external initializer {\n    _transferOwnership(_owner);\n\n    // Initialize ERC721 token\n    __ERC721Token_init(\"DealToken\", \"DEAL\");\n\n    // Initialize Deals registry\n    __DealsRegistry_init(_name, _version, _config, _entities);\n  }\n\n  /// Getters\n\n  /**\n   * @dev Returns offerId linked to the token\n   * @param tokenId The ID of the token\n   * @return offerId The ID of the offer linked to the token\n   */\n  function resolveTokenId(\n    uint256 tokenId\n  ) external view returns (bytes32 offerId) {\n    _requireMinted(tokenId);\n    offerId = tokenOffers[tokenId];\n  }\n\n  /// Pausable features\n\n  /**\n   * @dev Pauses the contract\n   */\n  function pause() public onlyOwner {\n    _pause();\n  }\n\n  /**\n   * @dev Unpauses the contract\n   */\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n  /// Features\n\n  /**\n   * @dev Executes logic before a deal is created\n   * @param offer The details of the offer\n   * @param price The price of the offer\n   * @param asset The address of the asset\n   * @param signs The signatures of the offer\n   */\n  function _beforeCreate(\n    Utils.Offer memory offer,\n    uint256 price,\n    address asset,\n    bytes[] memory signs\n  ) internal override(DealsRegistry) whenNotPaused {\n    super._beforeCreate(offer, price, asset, signs);\n  }\n\n  /**\n   * @dev Executes logic after a deal is created\n   * @param offer The details of the offer\n   * @param price The price of the offer\n   * @param asset The address of the asset\n   * @param signs The signatures of the offer\n   */\n  function _afterCreate(\n    Utils.Offer memory offer,\n    uint256 price,\n    address asset,\n    bytes[] memory signs\n  ) internal override(DealsRegistry) {\n    // After-deal logic\n    super._afterCreate(offer, price, asset, signs);\n  }\n\n  /**\n   * @dev Executes logic after a deal is claimed\n   * @param offerId The ID of the offer\n   * @param buyer The address of the buyer\n   */\n  function _afterClaim(\n    bytes32 offerId,\n    address buyer\n  ) internal override(DealsRegistry) {\n    // Minting of a token\n    uint256 tokenId = safeMint(buyer);\n    // Create a map of token Id on offer Id\n    tokenOffers[tokenId] = offerId;\n    // Create a map of offer Id on token Id\n    offerTokens[offerId] = tokenId;\n    super._afterClaim(offerId, buyer);\n  }\n\n  /**\n   * @dev Executes logic after a deal is canceled\n   * @param offerId The ID of the offer\n   */\n  function _afterCancel(bytes32 offerId) internal override(DealsRegistry) {\n    uint256 tokenId = offerTokens[offerId];\n\n    // If token has been minted we must burn it\n    if (tokenId != 0) {\n      safeBurn(tokenId);\n      delete tokenOffers[tokenId];\n      delete offerTokens[offerId];\n    }\n\n    super._beforeCancel(offerId);\n  }\n\n  /// ERC721 features\n\n  /**\n   * @dev Returns the token URI of the given token ID\n   * @param tokenId The ID of the token\n   * @return The token URI of the given token ID\n   */\n  function tokenURI(\n    uint256 tokenId\n  ) public view override(ERC721Upgradeable) returns (string memory) {\n    _requireMinted(tokenId);\n    // TODO: Generate data-uri that depends on the id\n    return \"\";\n  }\n\n  /**\n   * @dev Executes before a token transfer\n   * @param from The address to transfer the token from\n   * @param to The address to transfer the token to\n   * @param tokenId The ID of the token being transferred\n   * @param batchSize The size of the batch being transferred\n   *\n   * NOTE: Initially minted token is transferred to his owner without any restrictions\n   * All other transfers are managed according the following requirements:\n   *\n   * - token must be linked to an offerId\n   * - token can be transferred or not according to the configuration of offer\n   * - token can not be transferred when the deal status is `Claimed` only\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    uint256 batchSize\n  ) internal override(ERC721Token) whenNotPaused {\n    // Execute the logic when the function called not from `_mint` or `_burn`\n    if (from != address(0) && to != address(0)) {\n      bytes32 offerId = tokenOffers[tokenId];\n\n      if (offerId == bytes32(0)) {\n        revert DealNotFound();\n      }\n\n      Utils.Deal storage offerDeal = deals[offerId];\n\n      // Prevent transfer of token when this is not allowed by the offer\n      // or the deal is in the non-transferrable status\n      if (\n        !offerDeal.offer.transferable ||\n        offerDeal.status != Utils.DealStatus.Claimed\n      ) {\n        revert TokenTransferNotAllowed();\n      }\n\n      // Change the deal buyer to the new token owner\n      offerDeal.buyer = to;\n    }\n\n    super._beforeTokenTransfer(from, to, tokenId, batchSize);\n  }\n\n  uint256[50] private __gap;\n}\n"
    },
    "contracts/utils/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/// @dev Simple ERC20 token interface\ninterface IERC20 {\n  function decimals() external view returns (uint256);\n\n  function transfer(address, uint256) external returns (bool);\n\n  function transferFrom(address, address, uint256) external returns (bool);\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}